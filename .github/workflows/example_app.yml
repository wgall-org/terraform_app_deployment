name: Deploy example app

on: 
  workflow_dispatch:
    inputs:
      local_tf:
        description: 'locals.tf file content'
        type: string
        required: true
      project-name: 
        description: 'Name of project, same as Github Repository name'
        type: string 
        required: true
      env-content:
        description: 'Content of .env file for docker-docker-compose'
        type: string 
        required: true
      environment:
        description: 'Deployment environment'
        required: true 
        default: 'dev'
        type: choice 
        options:
          - dev 
          - stage 
          - prod
jobs:
  test_inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Correct project name
        run: echo "reponame=$(echo ${{ inputs.project-name }} | tr _ - )" >> $GITHUB_ENV
      - uses: actions/checkout@v3 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6
          terraform_wrapper: false
      - name: Authenitcate pipeline repository 
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.SA_CREDENTIALS }}
      - name: Setup SDK
        uses: google-github-actions/setup-gcloud@main 
        with:
          project_id: ${{ env.projectid }}
          export_default_credentials: true 
      - working-directory: ${{ inputs.project-name}}/terraform/${{ inputs.environment}}/resources
        run: | 
          echo "${{ secrets.VM_KEY }}" > inventory/key
          chmod 600 inventory/key
      - name: generate locals.tf 
        working-directory: ./python 
        run: |
          python3 main.py '${{ inputs.local_tf }}' '${{ inputs.env-content}}'
          cat .env
      - name: Check if backend is present  
        run: echo "is_present=$(gcloud run services list | grep ${{ env.reponame }}-${{ inputs.environment }} | wc -l)" >> $GITHUB_ENV 
      - name: Create Bucket for terraform backend
        if: ${{ env.is_present == '0'}}
        working-directory: ./backend
        run: |
          cp ../python/locals.tf .
          terraform init 
          terraform apply --auto-approve
      - name: Deploy frontend part of application 
        working-directory: ${{inputs.project-name }}/terraform/${{ inputs.environment }}
        run: | 
          export ANSIBLE_HOST_KEY_CHECKING=False
          cp ../../../python/locals.tf .
          sed -i "s/storage/${{ env.reponame }}-${{ inputs.environment }}/" main.tf
          terraform init -force-copy
          terraform apply --auto-approve


     